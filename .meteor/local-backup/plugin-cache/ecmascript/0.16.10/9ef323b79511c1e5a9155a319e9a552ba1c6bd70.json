{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/gckelechi/SmartKid/packages/blaze/materializer.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/blaze/materializer.js","filename":"/home/gckelechi/SmartKid/packages/blaze/materializer.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/gckelechi/SmartKid","root":"/home/gckelechi/SmartKid","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/gckelechi/SmartKid/packages/blaze/materializer.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/blaze/materializer.js"}},"code":"var _slicedToArray;\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 0);\nvar _typeof;\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 1);\n// Turns HTMLjs into DOM nodes and DOMRanges.\n//\n// - `htmljs`: the value to materialize, which may be any of the htmljs\n//   types (Tag, CharRef, Comment, Raw, array, string, boolean, number,\n//   null, or undefined) or a View or Template (which will be used to\n//   construct a View).\n// - `intoArray`: the array of DOM nodes and DOMRanges to push the output\n//   into (required)\n// - `parentView`: the View we are materializing content for (optional)\n// - `_existingWorkStack`: optional argument, only used for recursive\n//   calls when there is some other _materializeDOM on the call stack.\n//   If _materializeDOM called your function and passed in a workStack,\n//   pass it back when you call _materializeDOM (such as from a workStack\n//   task).\n//\n// Returns `intoArray`, which is especially useful if you pass in `[]`.\nBlaze._materializeDOM = function (htmljs, intoArray, parentView, _existingWorkStack) {\n  // In order to use fewer stack frames, materializeDOMInner can push\n  // tasks onto `workStack`, and they will be popped off\n  // and run, last first, after materializeDOMInner returns.  The\n  // reason we use a stack instead of a queue is so that we recurse\n  // depth-first, doing newer tasks first.\n  var workStack = _existingWorkStack || [];\n  materializeDOMInner(htmljs, intoArray, parentView, workStack);\n  if (!_existingWorkStack) {\n    // We created the work stack, so we are responsible for finishing\n    // the work.  Call each \"task\" function, starting with the top\n    // of the stack.\n    while (workStack.length) {\n      // Note that running task() may push new items onto workStack.\n      var task = workStack.pop();\n      task();\n    }\n  }\n  return intoArray;\n};\nvar materializeDOMInner = function (htmljs, intoArray, parentView, workStack) {\n  if (htmljs == null) {\n    // null or undefined\n    return;\n  }\n  switch (_typeof(htmljs)) {\n    case 'string':\n    case 'boolean':\n    case 'number':\n      intoArray.push(document.createTextNode(String(htmljs)));\n      return;\n    case 'object':\n      if (htmljs.htmljsType) {\n        switch (htmljs.htmljsType) {\n          case HTML.Tag.htmljsType:\n            intoArray.push(materializeTag(htmljs, parentView, workStack));\n            return;\n          case HTML.CharRef.htmljsType:\n            intoArray.push(document.createTextNode(htmljs.str));\n            return;\n          case HTML.Comment.htmljsType:\n            intoArray.push(document.createComment(htmljs.sanitizedValue));\n            return;\n          case HTML.Raw.htmljsType:\n            // Get an array of DOM nodes by using the browser's HTML parser\n            // (like innerHTML).\n            var nodes = Blaze._DOMBackend.parseHTML(htmljs.value);\n            for (var i = 0; i < nodes.length; i++) intoArray.push(nodes[i]);\n            return;\n        }\n      } else if (HTML.isArray(htmljs)) {\n        for (var _i = htmljs.length - 1; _i >= 0; _i--) {\n          workStack.push(Blaze._bind(Blaze._materializeDOM, null, htmljs[_i], intoArray, parentView, workStack));\n        }\n        return;\n      } else {\n        // Try to construct a `Blaze.View` out of the object. If it works...\n        if (isPromiseLike(htmljs)) {\n          htmljs = Blaze._Await(htmljs);\n        } else if (htmljs instanceof Blaze.Template) {\n          htmljs = htmljs.constructView();\n        }\n\n        // ...materialize it.\n        if (htmljs instanceof Blaze.View) {\n          Blaze._materializeView(htmljs, parentView, workStack, intoArray);\n          return;\n        }\n      }\n  }\n  throw new Error(\"Unexpected object in htmljs: \" + htmljs);\n};\nvar isPromiseLike = function (x) {\n  return !!x && typeof x.then === 'function';\n};\nfunction then(maybePromise, fn) {\n  if (isPromiseLike(maybePromise)) {\n    maybePromise.then(fn, Blaze._reportException);\n  } else {\n    fn(maybePromise);\n  }\n}\nfunction waitForAllAttributes(attrs) {\n  // Non-object attrs (e.g., `null`) are ignored.\n  if (!attrs || attrs !== Object(attrs)) {\n    return {};\n  }\n\n  // Combined attributes, e.g., `<img {{x}} {{y}}>`.\n  if (Array.isArray(attrs)) {\n    var mapped = attrs.map(waitForAllAttributes);\n    return mapped.some(isPromiseLike) ? Promise.all(mapped) : mapped;\n  }\n\n  // Singular async attributes, e.g., `<img {{x}}>`.\n  if (isPromiseLike(attrs)) {\n    return attrs.then(waitForAllAttributes, Blaze._reportExceptionAndThrow);\n  }\n\n  // Singular sync attributes, with potentially async properties.\n  var promises = [];\n  var _loop = function (key, value) {\n    if (isPromiseLike(value)) {\n      promises.push(value.then(function (value) {\n        attrs[key] = value;\n      }, Blaze._reportExceptionAndThrow));\n    } else if (Array.isArray(value)) {\n      value.forEach(function (element, index) {\n        if (isPromiseLike(element)) {\n          promises.push(element.then(function (element) {\n            value[index] = element;\n          }, Blaze._reportExceptionAndThrow));\n        }\n      });\n    }\n  };\n  for (var _i2 = 0, _Object$entries = Object.entries(attrs); _i2 < _Object$entries.length; _i2++) {\n    var _ref = _Object$entries[_i2];\n    var _ref2 = _slicedToArray(_ref, 2);\n    var key = _ref2[0];\n    var value = _ref2[1];\n    _loop(key, value);\n  }\n\n  // If any of the properties were async, lift the `Promise`.\n  return promises.length ? Promise.all(promises).then(function () {\n    return attrs;\n  }, Blaze._reportExceptionAndThrow) : attrs;\n}\nvar materializeTag = function (tag, parentView, workStack) {\n  var tagName = tag.tagName;\n  var elem;\n  if ((HTML.isKnownSVGElement(tagName) || isSVGAnchor(tag)) && document.createElementNS) {\n    // inline SVG\n    elem = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n  } else {\n    // normal elements\n    elem = document.createElement(tagName);\n  }\n  var rawAttrs = tag.attrs;\n  var children = tag.children;\n  if (tagName === 'textarea' && tag.children.length && !(rawAttrs && 'value' in rawAttrs)) {\n    // Provide very limited support for TEXTAREA tags with children\n    // rather than a \"value\" attribute.\n    // Reactivity in the form of Views nested in the tag's children\n    // won't work.  Compilers should compile textarea contents into\n    // the \"value\" attribute of the tag, wrapped in a function if there\n    // is reactivity.\n    if (typeof rawAttrs === 'function' || HTML.isArray(rawAttrs)) {\n      throw new Error(\"Can't have reactive children of TEXTAREA node; \" + \"use the 'value' attribute instead.\");\n    }\n    rawAttrs = Object.assign({}, rawAttrs || null);\n    rawAttrs.value = Blaze._expand(children, parentView);\n    children = [];\n  }\n  if (rawAttrs) {\n    var attrUpdater = new ElementAttributesUpdater(elem);\n    var updateAttributes = function () {\n      var expandedAttrs = Blaze._expandAttributes(rawAttrs, parentView);\n      then(waitForAllAttributes(expandedAttrs), function (awaitedAttrs) {\n        var flattenedAttrs = HTML.flattenAttributes(awaitedAttrs);\n        var stringAttrs = {};\n        Object.keys(flattenedAttrs).forEach(function (attrName) {\n          // map `null`, `undefined`, and `false` to null, which is important\n          // so that attributes with nully values are considered absent.\n          // stringify anything else (e.g. strings, booleans, numbers including 0).\n          if (flattenedAttrs[attrName] == null || flattenedAttrs[attrName] === false) stringAttrs[attrName] = null;else stringAttrs[attrName] = Blaze._toText(flattenedAttrs[attrName], parentView, HTML.TEXTMODE.STRING);\n        });\n        attrUpdater.update(stringAttrs);\n      });\n    };\n    var updaterComputation;\n    if (parentView) {\n      updaterComputation = parentView.autorun(updateAttributes, undefined, 'updater');\n    } else {\n      updaterComputation = Tracker.nonreactive(function () {\n        return Tracker.autorun(function () {\n          Tracker._withCurrentView(parentView, updateAttributes);\n        });\n      });\n    }\n    Blaze._DOMBackend.Teardown.onElementTeardown(elem, function () {\n      function attrTeardown() {\n        updaterComputation.stop();\n      }\n      return attrTeardown;\n    }());\n  }\n  if (children.length) {\n    var childNodesAndRanges = [];\n    // push this function first so that it's done last\n    workStack.push(function () {\n      for (var i = 0; i < childNodesAndRanges.length; i++) {\n        var x = childNodesAndRanges[i];\n        if (x instanceof Blaze._DOMRange) x.attach(elem);else elem.appendChild(x);\n      }\n    });\n    // now push the task that calculates childNodesAndRanges\n    workStack.push(Blaze._bind(Blaze._materializeDOM, null, children, childNodesAndRanges, parentView, workStack));\n  }\n  return elem;\n};\nvar isSVGAnchor = function (node) {\n  // We generally aren't able to detect SVG <a> elements because\n  // if \"A\" were in our list of known svg element names, then all\n  // <a> nodes would be created using\n  // `document.createElementNS`. But in the special case of <a\n  // xlink:href=\"...\">, we can at least detect that attribute and\n  // create an SVG <a> tag in that case.\n  //\n  // However, we still have a general problem of knowing when to\n  // use document.createElementNS and when to use\n  // document.createElement; for example, font tags will always\n  // be created as SVG elements which can cause other\n  // problems. #1977\n  return node.tagName === \"a\" && node.attrs && node.attrs[\"xlink:href\"] !== undefined;\n};","map":{"version":3,"names":["_slicedToArray","module","link","default","v","_typeof","Blaze","_materializeDOM","htmljs","intoArray","parentView","_existingWorkStack","workStack","materializeDOMInner","length","task","pop","push","document","createTextNode","String","htmljsType","HTML","Tag","materializeTag","CharRef","str","Comment","createComment","sanitizedValue","Raw","nodes","_DOMBackend","parseHTML","value","i","isArray","_bind","isPromiseLike","_Await","Template","constructView","View","_materializeView","Error","x","then","maybePromise","fn","_reportException","waitForAllAttributes","attrs","Object","Array","mapped","map","some","Promise","all","_reportExceptionAndThrow","promises","_loop","key","forEach","element","index","_i2","_Object$entries","entries","_ref","_ref2","tag","tagName","elem","isKnownSVGElement","isSVGAnchor","createElementNS","createElement","rawAttrs","children","assign","_expand","attrUpdater","ElementAttributesUpdater","updateAttributes","expandedAttrs","_expandAttributes","awaitedAttrs","flattenedAttrs","flattenAttributes","stringAttrs","keys","attrName","_toText","TEXTMODE","STRING","update","updaterComputation","autorun","undefined","Tracker","nonreactive","_withCurrentView","Teardown","onElementTeardown","attrTeardown","stop","childNodesAndRanges","_DOMRange","attach","appendChild","node"],"sources":["packages/blaze/materializer.js"],"sourcesContent":["// Turns HTMLjs into DOM nodes and DOMRanges.\n//\n// - `htmljs`: the value to materialize, which may be any of the htmljs\n//   types (Tag, CharRef, Comment, Raw, array, string, boolean, number,\n//   null, or undefined) or a View or Template (which will be used to\n//   construct a View).\n// - `intoArray`: the array of DOM nodes and DOMRanges to push the output\n//   into (required)\n// - `parentView`: the View we are materializing content for (optional)\n// - `_existingWorkStack`: optional argument, only used for recursive\n//   calls when there is some other _materializeDOM on the call stack.\n//   If _materializeDOM called your function and passed in a workStack,\n//   pass it back when you call _materializeDOM (such as from a workStack\n//   task).\n//\n// Returns `intoArray`, which is especially useful if you pass in `[]`.\nBlaze._materializeDOM = function (htmljs, intoArray, parentView,\n                                  _existingWorkStack) {\n  // In order to use fewer stack frames, materializeDOMInner can push\n  // tasks onto `workStack`, and they will be popped off\n  // and run, last first, after materializeDOMInner returns.  The\n  // reason we use a stack instead of a queue is so that we recurse\n  // depth-first, doing newer tasks first.\n  const workStack = (_existingWorkStack || []);\n  materializeDOMInner(htmljs, intoArray, parentView, workStack);\n\n  if (! _existingWorkStack) {\n    // We created the work stack, so we are responsible for finishing\n    // the work.  Call each \"task\" function, starting with the top\n    // of the stack.\n    while (workStack.length) {\n      // Note that running task() may push new items onto workStack.\n      const task = workStack.pop();\n      task();\n    }\n  }\n\n  return intoArray;\n};\n\nconst materializeDOMInner = function (htmljs, intoArray, parentView, workStack) {\n  if (htmljs == null) {\n    // null or undefined\n    return;\n  }\n\n  switch (typeof htmljs) {\n  case 'string': case 'boolean': case 'number':\n    intoArray.push(document.createTextNode(String(htmljs)));\n    return;\n  case 'object':\n    if (htmljs.htmljsType) {\n      switch (htmljs.htmljsType) {\n      case HTML.Tag.htmljsType:\n        intoArray.push(materializeTag(htmljs, parentView, workStack));\n        return;\n      case HTML.CharRef.htmljsType:\n        intoArray.push(document.createTextNode(htmljs.str));\n        return;\n      case HTML.Comment.htmljsType:\n        intoArray.push(document.createComment(htmljs.sanitizedValue));\n        return;\n      case HTML.Raw.htmljsType:\n        // Get an array of DOM nodes by using the browser's HTML parser\n        // (like innerHTML).\n        const nodes = Blaze._DOMBackend.parseHTML(htmljs.value);\n        for (let i = 0; i < nodes.length; i++)\n          intoArray.push(nodes[i]);\n        return;\n      }\n    } else if (HTML.isArray(htmljs)) {\n      for (let i = htmljs.length-1; i >= 0; i--) {\n        workStack.push(Blaze._bind(Blaze._materializeDOM, null,\n                              htmljs[i], intoArray, parentView, workStack));\n      }\n      return;\n    } else {\n      // Try to construct a `Blaze.View` out of the object. If it works...\n      if (isPromiseLike(htmljs)) {\n        htmljs = Blaze._Await(htmljs);\n      } else if (htmljs instanceof Blaze.Template) {\n        htmljs = htmljs.constructView();\n      }\n\n      // ...materialize it.\n      if (htmljs instanceof Blaze.View) {\n        Blaze._materializeView(htmljs, parentView, workStack, intoArray);\n        return;\n      }\n    }\n  }\n\n  throw new Error(\"Unexpected object in htmljs: \" + htmljs);\n};\n\nconst isPromiseLike = x => !!x && typeof x.then === 'function';\n\nfunction then(maybePromise, fn) {\n  if (isPromiseLike(maybePromise)) {\n    maybePromise.then(fn, Blaze._reportException);\n  } else {\n    fn(maybePromise);\n  }\n}\n\nfunction waitForAllAttributes(attrs) {\n  // Non-object attrs (e.g., `null`) are ignored.\n  if (!attrs || attrs !== Object(attrs)) {\n    return {};\n  }\n\n  // Combined attributes, e.g., `<img {{x}} {{y}}>`.\n  if (Array.isArray(attrs)) {\n    const mapped = attrs.map(waitForAllAttributes);\n    return mapped.some(isPromiseLike) ? Promise.all(mapped) : mapped;\n  }\n\n  // Singular async attributes, e.g., `<img {{x}}>`.\n  if (isPromiseLike(attrs)) {\n    return attrs.then(waitForAllAttributes, Blaze._reportExceptionAndThrow);\n  }\n\n  // Singular sync attributes, with potentially async properties.\n  const promises = [];\n  for (const [key, value] of Object.entries(attrs)) {\n    if (isPromiseLike(value)) {\n      promises.push(value.then(value => {\n        attrs[key] = value;\n      }, Blaze._reportExceptionAndThrow));\n    } else if (Array.isArray(value)) {\n      value.forEach((element, index) => {\n        if (isPromiseLike(element)) {\n          promises.push(element.then(element => {\n            value[index] = element;\n          }, Blaze._reportExceptionAndThrow));\n        }\n      });\n    }\n  }\n\n  // If any of the properties were async, lift the `Promise`.\n  return promises.length\n    ? Promise.all(promises).then(() => attrs, Blaze._reportExceptionAndThrow)\n    : attrs;\n}\n\nconst materializeTag = function (tag, parentView, workStack) {\n  const tagName = tag.tagName;\n  let elem;\n  if ((HTML.isKnownSVGElement(tagName) || isSVGAnchor(tag))\n      && document.createElementNS) {\n    // inline SVG\n    elem = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n  } else {\n    // normal elements\n    elem = document.createElement(tagName);\n  }\n\n  let rawAttrs = tag.attrs;\n  let children = tag.children;\n  if (tagName === 'textarea' && tag.children.length &&\n      ! (rawAttrs && ('value' in rawAttrs))) {\n    // Provide very limited support for TEXTAREA tags with children\n    // rather than a \"value\" attribute.\n    // Reactivity in the form of Views nested in the tag's children\n    // won't work.  Compilers should compile textarea contents into\n    // the \"value\" attribute of the tag, wrapped in a function if there\n    // is reactivity.\n    if (typeof rawAttrs === 'function' ||\n        HTML.isArray(rawAttrs)) {\n      throw new Error(\"Can't have reactive children of TEXTAREA node; \" +\n                      \"use the 'value' attribute instead.\");\n    }\n    rawAttrs = Object.assign({}, rawAttrs || null);\n    rawAttrs.value = Blaze._expand(children, parentView);\n    children = [];\n  }\n\n  if (rawAttrs) {\n    const attrUpdater = new ElementAttributesUpdater(elem);\n    const updateAttributes = function () {\n      const expandedAttrs = Blaze._expandAttributes(rawAttrs, parentView);\n      then(waitForAllAttributes(expandedAttrs), awaitedAttrs => {\n        const flattenedAttrs = HTML.flattenAttributes(awaitedAttrs);\n        const stringAttrs = {};\n        Object.keys(flattenedAttrs).forEach((attrName) => {\n          // map `null`, `undefined`, and `false` to null, which is important\n          // so that attributes with nully values are considered absent.\n          // stringify anything else (e.g. strings, booleans, numbers including 0).\n          if (flattenedAttrs[attrName] == null || flattenedAttrs[attrName] === false)\n            stringAttrs[attrName] = null;\n          else\n            stringAttrs[attrName] = Blaze._toText(flattenedAttrs[attrName],\n                                                  parentView,\n                                                  HTML.TEXTMODE.STRING);\n        });\n        attrUpdater.update(stringAttrs);\n      });\n    };\n    let updaterComputation;\n    if (parentView) {\n      updaterComputation =\n        parentView.autorun(updateAttributes, undefined, 'updater');\n    } else {\n      updaterComputation = Tracker.nonreactive(function () {\n        return Tracker.autorun(function () {\n          Tracker._withCurrentView(parentView, updateAttributes);\n        });\n      });\n    }\n    Blaze._DOMBackend.Teardown.onElementTeardown(elem, function attrTeardown() {\n      updaterComputation.stop();\n    });\n  }\n\n  if (children.length) {\n    const childNodesAndRanges = [];\n    // push this function first so that it's done last\n    workStack.push(function () {\n      for (let i = 0; i < childNodesAndRanges.length; i++) {\n        const x = childNodesAndRanges[i];\n        if (x instanceof Blaze._DOMRange)\n          x.attach(elem);\n        else\n          elem.appendChild(x);\n      }\n    });\n    // now push the task that calculates childNodesAndRanges\n    workStack.push(Blaze._bind(Blaze._materializeDOM, null,\n                          children, childNodesAndRanges, parentView,\n                          workStack));\n  }\n\n  return elem;\n};\n\n\nconst isSVGAnchor = function (node) {\n  // We generally aren't able to detect SVG <a> elements because\n  // if \"A\" were in our list of known svg element names, then all\n  // <a> nodes would be created using\n  // `document.createElementNS`. But in the special case of <a\n  // xlink:href=\"...\">, we can at least detect that attribute and\n  // create an SVG <a> tag in that case.\n  //\n  // However, we still have a general problem of knowing when to\n  // use document.createElementNS and when to use\n  // document.createElement; for example, font tags will always\n  // be created as SVG elements which can cause other\n  // problems. #1977\n  return (node.tagName === \"a\" &&\n          node.attrs &&\n          node.attrs[\"xlink:href\"] !== undefined);\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"9ef323b79511c1e5a9155a319e9a552ba1c6bd70"}
