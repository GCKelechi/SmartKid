{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/gckelechi/SmartKid/packages/blaze/builtins.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/blaze/builtins.js","filename":"/home/gckelechi/SmartKid/packages/blaze/builtins.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/gckelechi/SmartKid","root":"/home/gckelechi/SmartKid","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/gckelechi/SmartKid/packages/blaze/builtins.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/blaze/builtins.js"}},"code":"var _slicedToArray;\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 0);\nvar _typeof;\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 1);\nvar has;\nmodule.link(\"lodash.has\", {\n  \"default\": function (v) {\n    has = v;\n  }\n}, 0);\nvar isObject;\nmodule.link(\"lodash.isobject\", {\n  \"default\": function (v) {\n    isObject = v;\n  }\n}, 1);\nBlaze._calculateCondition = function (cond) {\n  if (HTML.isArray(cond) && cond.length === 0) return false;\n  return !!cond;\n};\n\n/**\n * @summary Constructs a View that renders content with a data context.\n * @locus Client\n * @param {Object|Function} data An object to use as the data context, or a function returning such an object.  If a\n *   function is provided, it will be reactively re-run.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n */\nBlaze.With = function (data, contentFunc) {\n  var view = Blaze.View('with', contentFunc);\n  view.dataVar = null;\n  view.onViewCreated(function () {\n    view.dataVar = _createBinding(view, data, 'setData');\n  });\n  return view;\n};\n\n/**\n * @summary Shallow compare of two bindings.\n * @param {Binding} x\n * @param {Binding} y\n */\nfunction _isEqualBinding(x, y) {\n  if (_typeof(x) === 'object' && _typeof(y) === 'object') {\n    return x.error === y.error && ReactiveVar._isEqual(x.value, y.value);\n  } else {\n    return ReactiveVar._isEqual(x, y);\n  }\n}\n\n/**\n * @template T\n * @param {T} x\n * @returns {T}\n */\nfunction _identity(x) {\n  return x;\n}\n\n/**\n * Attaches a single binding to the instantiated view.\n * @template T, U\n * @param {ReactiveVar<U>} reactiveVar Target view.\n * @param {Promise<T> | T} value Bound value.\n * @param {function(T): U} [mapper] Maps the computed value before store.\n */\nfunction _setBindingValue(reactiveVar, value) {\n  var mapper = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _identity;\n  if (value && typeof value.then === 'function') {\n    value.then(function (value) {\n      return reactiveVar.set({\n        value: mapper(value)\n      });\n    }, function (error) {\n      return reactiveVar.set({\n        error: error\n      });\n    });\n  } else {\n    reactiveVar.set({\n      value: mapper(value)\n    });\n  }\n}\n\n/**\n * @template T, U\n * @param {Blaze.View} view Target view.\n * @param {Promise<T> | T | function(): (Promise<T> | T)} binding Binding value or its getter.\n * @param {string} [displayName] Autorun's display name.\n * @param {function(T): U} [mapper] Maps the computed value before store.\n * @returns {ReactiveVar<U>}\n */\nfunction _createBinding(view, binding, displayName, mapper) {\n  var reactiveVar = new ReactiveVar(undefined, _isEqualBinding);\n  if (typeof binding === 'function') {\n    view.autorun(function () {\n      return _setBindingValue(reactiveVar, binding(), mapper);\n    }, view.parentView, displayName);\n  } else {\n    _setBindingValue(reactiveVar, binding, mapper);\n  }\n  return reactiveVar;\n}\n\n/**\n * Attaches bindings to the instantiated view.\n * @param {Object} bindings A dictionary of bindings, each binding name\n * corresponds to a value or a function that will be reactively re-run.\n * @param {Blaze.View} view The target.\n */\nBlaze._attachBindingsToView = function (bindings, view) {\n  view.onViewCreated(function () {\n    Object.entries(bindings).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        name = _ref2[0],\n        binding = _ref2[1];\n      view._scopeBindings[name] = _createBinding(view, binding);\n    });\n  });\n};\n\n/**\n * @summary Constructs a View setting the local lexical scope in the block.\n * @param {Function} bindings Dictionary mapping names of bindings to\n * values or computations to reactively re-run.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n */\nBlaze.Let = function (bindings, contentFunc) {\n  var view = Blaze.View('let', contentFunc);\n  Blaze._attachBindingsToView(bindings, view);\n  return view;\n};\n\n/**\n * @summary Constructs a View that renders content conditionally.\n * @locus Client\n * @param {Function} conditionFunc A function to reactively re-run.  Whether the result is truthy or falsy determines\n *   whether `contentFunc` or `elseFunc` is shown.  An empty array is considered falsy.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#Renderable-Content).  If no\n *   `elseFunc` is supplied, no content is shown in the \"else\" case.\n */\nBlaze.If = function (conditionFunc, contentFunc, elseFunc, _not) {\n  var view = Blaze.View(_not ? 'unless' : 'if', function () {\n    // Render only if the binding has a value, i.e., it's either synchronous or\n    // has resolved. Rejected `Promise`s are NOT rendered.\n    var condition = view.__conditionVar.get();\n    if (condition && 'value' in condition) {\n      return condition.value ? contentFunc() : elseFunc ? elseFunc() : null;\n    }\n    return null;\n  });\n  view.__conditionVar = null;\n  view.onViewCreated(function () {\n    view.__conditionVar = _createBinding(view, conditionFunc, 'condition',\n    // Store only the actual condition.\n    function (value) {\n      return !Blaze._calculateCondition(value) !== !_not;\n    });\n  });\n  return view;\n};\n\n/**\n * @summary An inverted [`Blaze.If`](#Blaze-If).\n * @locus Client\n * @param {Function} conditionFunc A function to reactively re-run.  If the result is falsy, `contentFunc` is shown,\n *   otherwise `elseFunc` is shown.  An empty array is considered falsy.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#Renderable-Content).  If no\n *   `elseFunc` is supplied, no content is shown in the \"else\" case.\n */\nBlaze.Unless = function (conditionFunc, contentFunc, elseFunc) {\n  return Blaze.If(conditionFunc, contentFunc, elseFunc, true /*_not*/);\n};\n\n/**\n * @summary Constructs a View that renders `contentFunc` for each item in a sequence.\n * @locus Client\n * @param {Function} argFunc A function to reactively re-run. The function can\n * return one of two options:\n *\n * 1. An object with two fields: '_variable' and '_sequence'. Each iterates over\n *   '_sequence', it may be a Cursor, an array, null, or undefined. Inside the\n *   Each body you will be able to get the current item from the sequence using\n *   the name specified in the '_variable' field.\n *\n * 2. Just a sequence (Cursor, array, null, or undefined) not wrapped into an\n *   object. Inside the Each body, the current item will be set as the data\n *   context.\n * @param {Function} contentFunc A Function that returns  [*renderable\n * content*](#Renderable-Content).\n * @param {Function} [elseFunc] A Function that returns [*renderable\n * content*](#Renderable-Content) to display in the case when there are no items\n * in the sequence.\n */\nBlaze.Each = function (argFunc, contentFunc, elseFunc) {\n  var eachView = Blaze.View('each', function () {\n    var subviews = this.initialSubviews;\n    this.initialSubviews = null;\n    if (this._isCreatedForExpansion) {\n      this.expandedValueDep = new Tracker.Dependency();\n      this.expandedValueDep.depend();\n    }\n    return subviews;\n  });\n  eachView.initialSubviews = [];\n  eachView.numItems = 0;\n  eachView.inElseMode = false;\n  eachView.stopHandle = null;\n  eachView.contentFunc = contentFunc;\n  eachView.elseFunc = elseFunc;\n  eachView.argVar = undefined;\n  eachView.variableName = null;\n\n  // update the @index value in the scope of all subviews in the range\n  var updateIndices = function (from, to) {\n    if (to === undefined) {\n      to = eachView.numItems - 1;\n    }\n    for (var i = from; i <= to; i++) {\n      var view = eachView._domrange.members[i].view;\n      view._scopeBindings['@index'].set({\n        value: i\n      });\n    }\n  };\n  eachView.onViewCreated(function () {\n    // We evaluate `argFunc` in `Tracker.autorun` to ensure `Blaze.currentView`\n    // is always set when it runs.\n    eachView.argVar = _createBinding(eachView,\n    // Unwrap a sequence reactively (`{{#each x in xs}}`).\n    function () {\n      var maybeSequence = argFunc();\n      if (isObject(maybeSequence) && has(maybeSequence, '_sequence')) {\n        eachView.variableName = maybeSequence._variable || null;\n        maybeSequence = maybeSequence._sequence;\n      }\n      return maybeSequence;\n    }, 'collection');\n    eachView.stopHandle = ObserveSequence.observe(function () {\n      var _eachView$argVar$get;\n      return (_eachView$argVar$get = eachView.argVar.get()) === null || _eachView$argVar$get === void 0 ? void 0 : _eachView$argVar$get.value;\n    }, {\n      addedAt: function (id, item, index) {\n        Tracker.nonreactive(function () {\n          var newItemView;\n          if (eachView.variableName) {\n            // new-style #each (as in {{#each item in items}})\n            // doesn't create a new data context\n            newItemView = Blaze.View('item', eachView.contentFunc);\n          } else {\n            newItemView = Blaze.With(item, eachView.contentFunc);\n          }\n          eachView.numItems++;\n          var bindings = {};\n          bindings['@index'] = index;\n          if (eachView.variableName) {\n            bindings[eachView.variableName] = item;\n          }\n          Blaze._attachBindingsToView(bindings, newItemView);\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            if (eachView.inElseMode) {\n              eachView._domrange.removeMember(0);\n              eachView.inElseMode = false;\n            }\n            var range = Blaze._materializeView(newItemView, eachView);\n            eachView._domrange.addMember(range, index);\n            updateIndices(index);\n          } else {\n            eachView.initialSubviews.splice(index, 0, newItemView);\n          }\n        });\n      },\n      removedAt: function (id, item, index) {\n        Tracker.nonreactive(function () {\n          eachView.numItems--;\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            eachView._domrange.removeMember(index);\n            updateIndices(index);\n            if (eachView.elseFunc && eachView.numItems === 0) {\n              eachView.inElseMode = true;\n              eachView._domrange.addMember(Blaze._materializeView(Blaze.View('each_else', eachView.elseFunc), eachView), 0);\n            }\n          } else {\n            eachView.initialSubviews.splice(index, 1);\n          }\n        });\n      },\n      changedAt: function (id, newItem, oldItem, index) {\n        Tracker.nonreactive(function () {\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else {\n            var itemView;\n            if (eachView._domrange) {\n              itemView = eachView._domrange.getMember(index).view;\n            } else {\n              itemView = eachView.initialSubviews[index];\n            }\n            if (eachView.variableName) {\n              itemView._scopeBindings[eachView.variableName].set({\n                value: newItem\n              });\n            } else {\n              itemView.dataVar.set({\n                value: newItem\n              });\n            }\n          }\n        });\n      },\n      movedTo: function (id, item, fromIndex, toIndex) {\n        Tracker.nonreactive(function () {\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            eachView._domrange.moveMember(fromIndex, toIndex);\n            updateIndices(Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex));\n          } else {\n            var subviews = eachView.initialSubviews;\n            var itemView = subviews[fromIndex];\n            subviews.splice(fromIndex, 1);\n            subviews.splice(toIndex, 0, itemView);\n          }\n        });\n      }\n    });\n    if (eachView.elseFunc && eachView.numItems === 0) {\n      eachView.inElseMode = true;\n      eachView.initialSubviews[0] = Blaze.View('each_else', eachView.elseFunc);\n    }\n  });\n  eachView.onViewDestroyed(function () {\n    if (eachView.stopHandle) eachView.stopHandle.stop();\n  });\n  return eachView;\n};\n\n/**\n * Create a new `Blaze.Let` view that unwraps the given value.\n * @param {unknown} value\n * @returns {Blaze.View}\n */\nBlaze._Await = function (value) {\n  return Blaze.Let({\n    value: value\n  }, Blaze._AwaitContent);\n};\nBlaze._AwaitContent = function () {\n  var _Blaze$currentView$_s;\n  return (_Blaze$currentView$_s = Blaze.currentView._scopeBindings.value.get()) === null || _Blaze$currentView$_s === void 0 ? void 0 : _Blaze$currentView$_s.value;\n};\nBlaze._TemplateWith = function (arg, contentFunc) {\n  var w;\n  var argFunc = arg;\n  if (typeof arg !== 'function') {\n    argFunc = function () {\n      return arg;\n    };\n  }\n\n  // This is a little messy.  When we compile `{{> Template.contentBlock}}`, we\n  // wrap it in Blaze._InOuterTemplateScope in order to skip the intermediate\n  // parent Views in the current template.  However, when there's an argument\n  // (`{{> Template.contentBlock arg}}`), the argument needs to be evaluated\n  // in the original scope.  There's no good order to nest\n  // Blaze._InOuterTemplateScope and Blaze._TemplateWith to achieve this,\n  // so we wrap argFunc to run it in the \"original parentView\" of the\n  // Blaze._InOuterTemplateScope.\n  //\n  // To make this better, reconsider _InOuterTemplateScope as a primitive.\n  // Longer term, evaluate expressions in the proper lexical scope.\n  var wrappedArgFunc = function () {\n    var viewToEvaluateArg = null;\n    if (w.parentView && w.parentView.name === 'InOuterTemplateScope') {\n      viewToEvaluateArg = w.parentView.originalParentView;\n    }\n    if (viewToEvaluateArg) {\n      return Blaze._withCurrentView(viewToEvaluateArg, argFunc);\n    } else {\n      return argFunc();\n    }\n  };\n  var wrappedContentFunc = function () {\n    var content = contentFunc.call(this);\n\n    // Since we are generating the Blaze._TemplateWith view for the\n    // user, set the flag on the child view.  If `content` is a template,\n    // construct the View so that we can set the flag.\n    if (content instanceof Blaze.Template) {\n      content = content.constructView();\n    }\n    if (content instanceof Blaze.View) {\n      content._hasGeneratedParent = true;\n    }\n    return content;\n  };\n  w = Blaze.With(wrappedArgFunc, wrappedContentFunc);\n  w.__isTemplateWith = true;\n  return w;\n};\nBlaze._InOuterTemplateScope = function (templateView, contentFunc) {\n  var view = Blaze.View('InOuterTemplateScope', contentFunc);\n  var parentView = templateView.parentView;\n\n  // Hack so that if you call `{{> foo bar}}` and it expands into\n  // `{{#with bar}}{{> foo}}{{/with}}`, and then `foo` is a template\n  // that inserts `{{> Template.contentBlock}}`, the data context for\n  // `Template.contentBlock` is not `bar` but the one enclosing that.\n  if (parentView.__isTemplateWith) parentView = parentView.parentView;\n  view.onViewCreated(function () {\n    this.originalParentView = this.parentView;\n    this.parentView = parentView;\n    this.__childDoesntStartNewLexicalScope = true;\n  });\n  return view;\n};","map":{"version":3,"names":["_slicedToArray","module","link","default","v","_typeof","has","isObject","Blaze","_calculateCondition","cond","HTML","isArray","length","With","data","contentFunc","view","View","dataVar","onViewCreated","_createBinding","_isEqualBinding","x","y","error","ReactiveVar","_isEqual","value","_identity","_setBindingValue","reactiveVar","mapper","arguments","undefined","then","set","binding","displayName","autorun","parentView","_attachBindingsToView","bindings","Object","entries","forEach","_ref","_ref2","name","_scopeBindings","Let","If","conditionFunc","elseFunc","_not","condition","__conditionVar","get","Unless","Each","argFunc","eachView","subviews","initialSubviews","_isCreatedForExpansion","expandedValueDep","Tracker","Dependency","depend","numItems","inElseMode","stopHandle","argVar","variableName","updateIndices","from","to","i","_domrange","members","maybeSequence","_variable","_sequence","ObserveSequence","observe","_eachView$argVar$get","addedAt","id","item","index","nonreactive","newItemView","changed","removeMember","range","_materializeView","addMember","splice","removedAt","changedAt","newItem","oldItem","itemView","getMember","movedTo","fromIndex","toIndex","moveMember","Math","min","max","onViewDestroyed","stop","_Await","_AwaitContent","_Blaze$currentView$_s","currentView","_TemplateWith","arg","w","wrappedArgFunc","viewToEvaluateArg","originalParentView","_withCurrentView","wrappedContentFunc","content","call","Template","constructView","_hasGeneratedParent","__isTemplateWith","_InOuterTemplateScope","templateView","__childDoesntStartNewLexicalScope"],"sources":["packages/blaze/builtins.js"],"sourcesContent":["import has from 'lodash.has';\nimport isObject from 'lodash.isobject';\n\nBlaze._calculateCondition = function (cond) {\n  if (HTML.isArray(cond) && cond.length === 0) return false;\n  return !!cond;\n};\n\n/**\n * @summary Constructs a View that renders content with a data context.\n * @locus Client\n * @param {Object|Function} data An object to use as the data context, or a function returning such an object.  If a\n *   function is provided, it will be reactively re-run.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n */\nBlaze.With = function (data, contentFunc) {\n  const view = Blaze.View('with', contentFunc);\n\n  view.dataVar = null;\n  view.onViewCreated(() => {\n    view.dataVar = _createBinding(view, data, 'setData');\n  });\n\n  return view;\n};\n\n\n/**\n * @summary Shallow compare of two bindings.\n * @param {Binding} x\n * @param {Binding} y\n */\nfunction _isEqualBinding(x, y) {\n  if (typeof x === 'object' && typeof y === 'object') {\n    return x.error === y.error && ReactiveVar._isEqual(x.value, y.value);\n  }\n  else {\n    return ReactiveVar._isEqual(x, y);\n  }\n}\n\n/**\n * @template T\n * @param {T} x\n * @returns {T}\n */\nfunction _identity(x) {\n  return x;\n}\n\n/**\n * Attaches a single binding to the instantiated view.\n * @template T, U\n * @param {ReactiveVar<U>} reactiveVar Target view.\n * @param {Promise<T> | T} value Bound value.\n * @param {function(T): U} [mapper] Maps the computed value before store.\n */\nfunction _setBindingValue(reactiveVar, value, mapper = _identity) {\n  if (value && typeof value.then === 'function') {\n    value.then(\n      value => reactiveVar.set({ value: mapper(value) }),\n      error => reactiveVar.set({ error }),\n    );\n  } else {\n    reactiveVar.set({ value: mapper(value) });\n  }\n}\n\n/**\n * @template T, U\n * @param {Blaze.View} view Target view.\n * @param {Promise<T> | T | function(): (Promise<T> | T)} binding Binding value or its getter.\n * @param {string} [displayName] Autorun's display name.\n * @param {function(T): U} [mapper] Maps the computed value before store.\n * @returns {ReactiveVar<U>}\n */\nfunction _createBinding(view, binding, displayName, mapper) {\n  const reactiveVar = new ReactiveVar(undefined, _isEqualBinding);\n  if (typeof binding === 'function') {\n    view.autorun(\n      () => _setBindingValue(reactiveVar, binding(), mapper),\n      view.parentView,\n      displayName,\n    );\n  } else {\n    _setBindingValue(reactiveVar, binding, mapper);\n  }\n\n  return reactiveVar;\n}\n\n/**\n * Attaches bindings to the instantiated view.\n * @param {Object} bindings A dictionary of bindings, each binding name\n * corresponds to a value or a function that will be reactively re-run.\n * @param {Blaze.View} view The target.\n */\nBlaze._attachBindingsToView = function (bindings, view) {\n  view.onViewCreated(function () {\n    Object.entries(bindings).forEach(function ([name, binding]) {\n      view._scopeBindings[name] = _createBinding(view, binding);\n    });\n  });\n};\n\n/**\n * @summary Constructs a View setting the local lexical scope in the block.\n * @param {Function} bindings Dictionary mapping names of bindings to\n * values or computations to reactively re-run.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n */\nBlaze.Let = function (bindings, contentFunc) {\n  var view = Blaze.View('let', contentFunc);\n  Blaze._attachBindingsToView(bindings, view);\n\n  return view;\n};\n\n/**\n * @summary Constructs a View that renders content conditionally.\n * @locus Client\n * @param {Function} conditionFunc A function to reactively re-run.  Whether the result is truthy or falsy determines\n *   whether `contentFunc` or `elseFunc` is shown.  An empty array is considered falsy.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#Renderable-Content).  If no\n *   `elseFunc` is supplied, no content is shown in the \"else\" case.\n */\nBlaze.If = function (conditionFunc, contentFunc, elseFunc, _not) {\n  const view = Blaze.View(_not ? 'unless' : 'if', function () {\n    // Render only if the binding has a value, i.e., it's either synchronous or\n    // has resolved. Rejected `Promise`s are NOT rendered.\n    const condition = view.__conditionVar.get();\n    if (condition && 'value' in condition) {\n      return condition.value ? contentFunc() : (elseFunc ? elseFunc() : null);\n    }\n\n    return null;\n  });\n\n  view.__conditionVar = null;\n  view.onViewCreated(() => {\n    view.__conditionVar = _createBinding(\n      view,\n      conditionFunc,\n      'condition',\n      // Store only the actual condition.\n      value => !Blaze._calculateCondition(value) !== !_not,\n    );\n  });\n\n  return view;\n};\n\n/**\n * @summary An inverted [`Blaze.If`](#Blaze-If).\n * @locus Client\n * @param {Function} conditionFunc A function to reactively re-run.  If the result is falsy, `contentFunc` is shown,\n *   otherwise `elseFunc` is shown.  An empty array is considered falsy.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#Renderable-Content).  If no\n *   `elseFunc` is supplied, no content is shown in the \"else\" case.\n */\nBlaze.Unless = function (conditionFunc, contentFunc, elseFunc) {\n  return Blaze.If(conditionFunc, contentFunc, elseFunc, true /*_not*/);\n};\n\n/**\n * @summary Constructs a View that renders `contentFunc` for each item in a sequence.\n * @locus Client\n * @param {Function} argFunc A function to reactively re-run. The function can\n * return one of two options:\n *\n * 1. An object with two fields: '_variable' and '_sequence'. Each iterates over\n *   '_sequence', it may be a Cursor, an array, null, or undefined. Inside the\n *   Each body you will be able to get the current item from the sequence using\n *   the name specified in the '_variable' field.\n *\n * 2. Just a sequence (Cursor, array, null, or undefined) not wrapped into an\n *   object. Inside the Each body, the current item will be set as the data\n *   context.\n * @param {Function} contentFunc A Function that returns  [*renderable\n * content*](#Renderable-Content).\n * @param {Function} [elseFunc] A Function that returns [*renderable\n * content*](#Renderable-Content) to display in the case when there are no items\n * in the sequence.\n */\nBlaze.Each = function (argFunc, contentFunc, elseFunc) {\n  const eachView = Blaze.View('each', function () {\n    const subviews = this.initialSubviews;\n    this.initialSubviews = null;\n    if (this._isCreatedForExpansion) {\n      this.expandedValueDep = new Tracker.Dependency;\n      this.expandedValueDep.depend();\n    }\n    return subviews;\n  });\n  eachView.initialSubviews = [];\n  eachView.numItems = 0;\n  eachView.inElseMode = false;\n  eachView.stopHandle = null;\n  eachView.contentFunc = contentFunc;\n  eachView.elseFunc = elseFunc;\n  eachView.argVar = undefined;\n  eachView.variableName = null;\n\n  // update the @index value in the scope of all subviews in the range\n  const updateIndices = function (from, to) {\n    if (to === undefined) {\n      to = eachView.numItems - 1;\n    }\n\n    for (let i = from; i <= to; i++) {\n      const view = eachView._domrange.members[i].view;\n      view._scopeBindings['@index'].set({ value: i });\n    }\n  };\n\n  eachView.onViewCreated(function () {\n    // We evaluate `argFunc` in `Tracker.autorun` to ensure `Blaze.currentView`\n    // is always set when it runs.\n    eachView.argVar = _createBinding(\n      eachView,\n      // Unwrap a sequence reactively (`{{#each x in xs}}`).\n      () => {\n        let maybeSequence = argFunc();\n        if (isObject(maybeSequence) && has(maybeSequence, '_sequence')) {\n          eachView.variableName = maybeSequence._variable || null;\n          maybeSequence = maybeSequence._sequence;\n        }\n        return maybeSequence;\n      },\n      'collection',\n    );\n\n    eachView.stopHandle = ObserveSequence.observe(function () {\n      return eachView.argVar.get()?.value;\n    }, {\n      addedAt: function (id, item, index) {\n        Tracker.nonreactive(function () {\n          let newItemView;\n          if (eachView.variableName) {\n            // new-style #each (as in {{#each item in items}})\n            // doesn't create a new data context\n            newItemView = Blaze.View('item', eachView.contentFunc);\n          } else {\n            newItemView = Blaze.With(item, eachView.contentFunc);\n          }\n\n          eachView.numItems++;\n\n          const bindings = {};\n          bindings['@index'] = index;\n          if (eachView.variableName) {\n            bindings[eachView.variableName] = item;\n          }\n          Blaze._attachBindingsToView(bindings, newItemView);\n\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            if (eachView.inElseMode) {\n              eachView._domrange.removeMember(0);\n              eachView.inElseMode = false;\n            }\n\n            const range = Blaze._materializeView(newItemView, eachView);\n            eachView._domrange.addMember(range, index);\n            updateIndices(index);\n          } else {\n            eachView.initialSubviews.splice(index, 0, newItemView);\n          }\n        });\n      },\n      removedAt: function (id, item, index) {\n        Tracker.nonreactive(function () {\n          eachView.numItems--;\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            eachView._domrange.removeMember(index);\n            updateIndices(index);\n            if (eachView.elseFunc && eachView.numItems === 0) {\n              eachView.inElseMode = true;\n              eachView._domrange.addMember(\n                Blaze._materializeView(\n                  Blaze.View('each_else',eachView.elseFunc),\n                  eachView), 0);\n            }\n          } else {\n            eachView.initialSubviews.splice(index, 1);\n          }\n        });\n      },\n      changedAt: function (id, newItem, oldItem, index) {\n        Tracker.nonreactive(function () {\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else {\n            let itemView;\n            if (eachView._domrange) {\n              itemView = eachView._domrange.getMember(index).view;\n            } else {\n              itemView = eachView.initialSubviews[index];\n            }\n            if (eachView.variableName) {\n              itemView._scopeBindings[eachView.variableName].set({ value: newItem });\n            } else {\n              itemView.dataVar.set({ value: newItem });\n            }\n          }\n        });\n      },\n      movedTo: function (id, item, fromIndex, toIndex) {\n        Tracker.nonreactive(function () {\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            eachView._domrange.moveMember(fromIndex, toIndex);\n            updateIndices(\n              Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex));\n          } else {\n            const subviews = eachView.initialSubviews;\n            const itemView = subviews[fromIndex];\n            subviews.splice(fromIndex, 1);\n            subviews.splice(toIndex, 0, itemView);\n          }\n        });\n      }\n    });\n\n    if (eachView.elseFunc && eachView.numItems === 0) {\n      eachView.inElseMode = true;\n      eachView.initialSubviews[0] =\n        Blaze.View('each_else', eachView.elseFunc);\n    }\n  });\n\n  eachView.onViewDestroyed(function () {\n    if (eachView.stopHandle)\n      eachView.stopHandle.stop();\n  });\n\n  return eachView;\n};\n\n/**\n * Create a new `Blaze.Let` view that unwraps the given value.\n * @param {unknown} value\n * @returns {Blaze.View}\n */\nBlaze._Await = function (value) {\n  return Blaze.Let({ value }, Blaze._AwaitContent);\n};\n\nBlaze._AwaitContent = function () {\n  return Blaze.currentView._scopeBindings.value.get()?.value;\n};\n\nBlaze._TemplateWith = function (arg, contentFunc) {\n  let w;\n\n  let argFunc = arg;\n  if (typeof arg !== 'function') {\n    argFunc = function () {\n      return arg;\n    };\n  }\n\n  // This is a little messy.  When we compile `{{> Template.contentBlock}}`, we\n  // wrap it in Blaze._InOuterTemplateScope in order to skip the intermediate\n  // parent Views in the current template.  However, when there's an argument\n  // (`{{> Template.contentBlock arg}}`), the argument needs to be evaluated\n  // in the original scope.  There's no good order to nest\n  // Blaze._InOuterTemplateScope and Blaze._TemplateWith to achieve this,\n  // so we wrap argFunc to run it in the \"original parentView\" of the\n  // Blaze._InOuterTemplateScope.\n  //\n  // To make this better, reconsider _InOuterTemplateScope as a primitive.\n  // Longer term, evaluate expressions in the proper lexical scope.\n  const wrappedArgFunc = function () {\n    let viewToEvaluateArg = null;\n    if (w.parentView && w.parentView.name === 'InOuterTemplateScope') {\n      viewToEvaluateArg = w.parentView.originalParentView;\n    }\n    if (viewToEvaluateArg) {\n      return Blaze._withCurrentView(viewToEvaluateArg, argFunc);\n    } else {\n      return argFunc();\n    }\n  };\n\n  const wrappedContentFunc = function () {\n    let content = contentFunc.call(this);\n\n    // Since we are generating the Blaze._TemplateWith view for the\n    // user, set the flag on the child view.  If `content` is a template,\n    // construct the View so that we can set the flag.\n    if (content instanceof Blaze.Template) {\n      content = content.constructView();\n    }\n    if (content instanceof Blaze.View) {\n      content._hasGeneratedParent = true;\n    }\n\n    return content;\n  };\n\n  w = Blaze.With(wrappedArgFunc, wrappedContentFunc);\n  w.__isTemplateWith = true;\n  return w;\n};\n\nBlaze._InOuterTemplateScope = function (templateView, contentFunc) {\n  const view = Blaze.View('InOuterTemplateScope', contentFunc);\n  let parentView = templateView.parentView;\n\n  // Hack so that if you call `{{> foo bar}}` and it expands into\n  // `{{#with bar}}{{> foo}}{{/with}}`, and then `foo` is a template\n  // that inserts `{{> Template.contentBlock}}`, the data context for\n  // `Template.contentBlock` is not `bar` but the one enclosing that.\n  if (parentView.__isTemplateWith)\n    parentView = parentView.parentView;\n\n  view.onViewCreated(function () {\n    this.originalParentView = this.parentView;\n    this.parentView = parentView;\n    this.__childDoesntStartNewLexicalScope = true;\n  });\n  return view;\n};\n\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"e096b2ade3f29c904e6b76cde8f0035f15e3eb5b"}
